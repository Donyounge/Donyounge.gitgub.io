<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Donyounge的博客</title><link>https://Donyounge.github.io/Donyounge.gitgub.io</link><description>我自己的博客，记录学习生活</description><copyright>Donyounge的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Donyounge.github.io/Donyounge.gitgub.io</link></image><lastBuildDate>Sun, 02 Mar 2025 15:09:54 +0000</lastBuildDate><managingEditor>Donyounge的博客</managingEditor><ttl>60</ttl><webMaster>Donyounge的博客</webMaster><item><title>C-3</title><link>https://Donyounge.github.io/Donyounge.gitgub.io/post/C-3.html</link><description>0--数字0
’0‘--字符0--ASCII值为48
\0--字符--ASCII值为0
EOF-- End Of File 文件的结束标志 值是-1 通过左键选中右键下拉栏中查看定义

# 关于ASCII的实例*2
输入ASCII码值，输出对应字符
```c
int main() 
{
    int c;
    scanf('%d', &amp;c);
    printf('%c\n', c);
    return 0;
```
输入数值，输出对应ASCII码
```c
int main()
{
    char c;
    scanf('%c', &amp;c);
    printf('%d\n', c);
    return 0;
}
```
# 算数操作符 +  -  *  /  % 
## 相关实例
```c
int main()
{
    int a = 7 / 2;
    int b = 7 % 2;
    float = 7.0/2；
//除号'/'的两端都是整数的时候，执行整数除法，结果也是整数，小数部分会被舍弃
//如果两端只要有一个是小数，结果就是小数
//'%'取模的两侧只能都是整数
//如果两端只要有一个是小数，结果就是小数
    printf('%d\n', a);//3
    printf('%d\n', b);//1 取模/取余 
    printf('%f\n', c);//3.5 此时进行浮点数除法
    printf('%.1f\n', c);//小数点后保留一位
    return 0;
}
```
# 赋值操作符及其相关实例
```c
int main()
{
	int a = 0;//初始化
	a = 20;   //赋值
	a += 3;   //a = a + 3//值为23
	a -= 5;   //a = a - 5//值为18
	a *= 2;   //a = a * 2//值为36
	a /= 4;   //a = a / 4//值为9
	a %= 4;   //a = a % 4//值为1

	return 0;
}

```
# 移位操作符
**移位操作符 &gt;&gt; &lt;&lt;**
# 位操作符
**位操作符  &amp;  ^  |**  
# 双目操作符 
```c
a+b;
a-b;
a*b;
a/b;
a%b;
```
有两个参数参与、
# 单目操作符
  !        逻辑反操作
正负号+-
&amp;        取地址
sizeof   操作数的类型长度
~        对一个数的二进制按位取反
--       前置、后置--
++       前置、后置++
间接访问操作符（解引用操作符）*
(类型)   强制类型转换
## 相关实例 ！
```c
\\C语言中  0表示假  非零表示真
 int main()
{
	int  flag = 1;
	if (!flag)//flag为1，取反为0，所以为假
	{
		printf('hehe\n');
	}
	else
	{
		printf('hoho\n');
	}

	return 0;
}

```
if()若括号中为真，非零，执行if下{}中语句
    若括号中为假，即零，执行其他
## 相关实例 size of #3 相关size of
```c
int main()
{
	int a = 10;
	printf('%d\n', sizeof(a));   //4
	printf('%d\n', sizeof (int));//4 
	printf('%d\n', sizeof a);    //4
	int arr[10] = { 0 };
	printf('%d\n', sizeof(arr));//40,是整个数组的大小，数组中有10个元素，每个元素是4个字节
	printf('%d\n', sizeof(arr[0]));//4,是数组中第一个元素的大小
	printf('%d\n', sizeof(arr) / sizeof(arr[0]));//10,数组的大小/数组中第一个元素的大小=数组中元素的个数
	return 0;
}

```
## 相关实例 前++与后++
```c
int main()
{
	int a = 10;
	int b = a++;
	//后置++，先赋值再++，等同int b = a; a = a + 1;

	printf('%d\n', b);
	printf('%d\n', a);
	return 0;
}
int main()
{
	int a = 10;
	int b = ++a;
	//前置++，先++再复制，等同a = a+1;int b = a; 

	printf('%d\n', b);
	printf('%d\n', a);
	return 0;
}
```
## 相关实例 强制类型转换
```c
int main()
{
	int a = 3.14;
	//3.14是一个浮点数，编译器默认其为double类型，double类型的数赋值给int类型的变量，会丢失精度
	printf('%d\n', a);//3
	int a = (int)3.14;
	printf('%d\n', a);//3
	return 0;
}
```。</description><guid isPermaLink="true">https://Donyounge.github.io/Donyounge.gitgub.io/post/C-3.html</guid><pubDate>Mon, 24 Feb 2025 16:50:21 +0000</pubDate></item><item><title>C-2</title><link>https://Donyounge.github.io/Donyounge.gitgub.io/post/C-2.html</link><description># 实例
## 分支选择
```c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
int main()
{
	int input = 0;
	printf('偶遇成都经典款胖熊，拼尽全力无法战胜，你的选择是成为(1/0)\n');
	scanf('%d', &amp;input);
	
	if (input == 0)
	{ 
		printf('当0\n');
	}
	else
	{
		printf('当1\n');
	}
	return 0;
}
```
## 循环
```c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
int	main()
{
	int line = 0;
	printf('天天学习\n');
	while (line&lt;20000) 
	{  
		printf('写代码%d\n',line);
		line++;
	}
	if (line &gt;= 20000)
	{
		printf('不赖\n');
	}
	else 
	{
		printf('不行\n');
	}
	return 0;
}
```
## 加法器函数
```c
int add(int x, int y) //int为函数的返回值类型
{int z = 0    ;
	 z = x + y;
	 return z ;//z是整数，返回为整数，函数前也要声明为整数
}
```
更加简化的写法
```c
/*int add(int x, int y)
{
	return (x + y); 更加简化的写法
}
```
使用例
```c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
int main()
{
	int num1 = 0;
	int num2 = 0;
	int  sum = 0;
	scanf('%d %d', &amp;num1, &amp;num2);
	sum = Add(num1,num2)       ;
	printf('sum=%d\n',sum)     ;
	return 0                    ;
}
```
## 比较器
```c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
 int max(int x,int y)
 { if (x&gt;y)
   return x;
   else
   return y;
 }
int main()
{    int num1 = 0;
     int num2 = 0;
     int     Big = 0;
    scanf('%d %d',&amp;num1,&amp;num2);
    Big = max(num1,num2);
    printf('比较大的是%d\n',Big);
    return 0;
}
```

# 数组
```c
int main()
{
	int arr[10] = { 11,12,13,14,15,16,17,18,19,20 };//其实数组里的元素是有隐藏的排序下标的，从0开始
//数组初始化，可以不指定其大小，[]中可以不填写内容，它会自动根据后续自行确定存放个数
	printf('%d\n',arr[8]);                    //打印数组里的第八个元素 
	int i = 0;
	while (i &lt; 10)
	{
		printf('%d\n', arr[i]);  
		i++;
	}
	return 0;
}
```
#3 中提到过[]中不可出现变量，如：
const int a = 10;//const修饰的a，本职是变量，但是不能被修改，有了常量的属性
int arr[10];//创建了一个可以存放10个整形的数组，此时左侧[]中的10不可省略，但是可以替换成a
int arr[10] = { 0 };//创建了一个可以存放10个整形的数组，[]中需要输入一个常量，但是上述的a不可替代10，a本质还是变量,数组初始化时的[]之中的只能是常量，不可为变量
printf('%d\n', arr[i]); 是正确的写法，表示输出数组arr中下标为i的元素
int arr[]={1,2,3};此时左侧[]中可以不写数组大小，会根据右侧自动确认大小
```c
int main()
{   char arr[] = { 'b','i','t'};
\\char 型数组存放的是字符串，但是后续又没有\0，所以输出字符长度是自动在bit之后进行检索寻找\0,找到后的长度为输出的字符串长度，为随机值
  printf('%s\n',strlen(arr));\\值不为3，为随机数
return 0；
}
int main()
{   char arr[4] = { 'b','i','t'};
\\不完全初始化,数组能存储4个，4个未全部初始化，称之为**不完全初始化**，剩余的部分默认初始化为0，，又因为数字0与\0的ASII码值是相同的，字符串长度仍然为3
  printf('%s\n',strlen(arr));\\值为3，
return 0；
}
```
。</description><guid isPermaLink="true">https://Donyounge.github.io/Donyounge.gitgub.io/post/C-2.html</guid><pubDate>Sun, 23 Feb 2025 08:32:35 +0000</pubDate></item><item><title>C-1</title><link>https://Donyounge.github.io/Donyounge.gitgub.io/post/C-1.html</link><description># 变量类型
```c
#include &lt;stdio.h&gt;

int main()
{
	printf('%zu\n',sizeof(char));              //1    字节
	printf('%zu\n',sizeof(short));             //2
	printf('%zu\n',sizeof(int));               //4
	printf('%zu\n',sizeof(long));              //4         C语言规定sizeof(long)&gt;=sizeof(int)
	printf('%zu\n',sizeof(long long));         //8
	printf('%zu\n',sizeof(float));             //4
	printf('%zu\n',sizeof(double));            //8
	printf('%zu\n',sizeof(long double));       //12

        return 0；
}
```
sizeof(数据类型)  计算数据类型所占的字节数
一般前用：
%zu(无符号)/%zd(有符号)
打印sizeof的结果
其余sizeof相关内容见 
#5 
# 内存单位

计算机中的单位 bit  比特位 计算机中的单位bit为存1个二进制比特位所使用的大小
	               byte 字节   8比特位 = 1字节 
			   kb         1024byte = 1kb
			   mb           1024kb = 1mb 
		           gb           1024mb = 1gb
			     tb           1024gb = 1tb
			     pb           1024tb = 1pb
			    eb           1024pb = 1eb
			     zb           1024eb = 1zb
---
# 关于关键字extern的实例
同一个项目下，不同源文件之间的参数是可以通过一定手段实现跨越源文件使用的，如：
## 源文件1
```c
int d = 22；
```
## 源文件2
```c
extern int d；\\声明了一个变量d，类型为int,来自外部文件的全局变量，可以在整个工程中适用
```
# 常量类型

1. 字面常量
2. const修饰的常变量
3. define定义的标识符常量
4. 枚举常量

## 字面常量
```c
30   ;  //字面常量
3.14 ;  
'w'  ;  //字符，用了单引号
'asd';  //能用肉眼观察到的常量，字符串用的双引号
```
## const 修饰的常变量
```c
const int a = 10;//const修饰的a，本职是变量，但是不能被修改，有了常量的属性。</description><guid isPermaLink="true">https://Donyounge.github.io/Donyounge.gitgub.io/post/C-1.html</guid><pubDate>Sat, 22 Feb 2025 08:04:10 +0000</pubDate></item><item><title>测试功能</title><link>https://Donyounge.github.io/Donyounge.gitgub.io/post/ce-shi-gong-neng.html</link><description># markdown语法



# 标题

## 二级标题

### 三级标题

#### 四级标题

##### 五级标题

###### 六级标题



## 引用

&gt; 这是一段引用

&gt; https://www.bilibili.com/video/BV1JA411h7Gw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1db826af20ac643dce96190fd8c9f0e3 bilibili net



## 有序列表：

把大象关进冰箱需要3步：

1. 打开冰箱

2. 把大象放进冰箱

3. 关上冰箱



## 无序列表

把大象关进冰箱需要3步：

- 打开冰箱

- 把大象放进冰箱

- 关上冰箱



## 任务列表

今天学习任务列表:

- [ ] 今天

- [x] 今天

- [x] 今天



## 代码块

```c

int main(){

	return 0;

}

```



## 数学公式

$$

\frac{\partial f}{\partial x} = 2\sqrt{a}x

$$



## 行内数学公式



$\theta=x^2$



## 表格

|姓名|年龄|成绩|

|:---|---:|:---:|

|张三|19|19|

|李四|19|19|



## 脚注

一键三连[^三连]



[^三连]:点赞，投币，收藏。</description><guid isPermaLink="true">https://Donyounge.github.io/Donyounge.gitgub.io/post/ce-shi-gong-neng.html</guid><pubDate>Sat, 22 Feb 2025 04:46:31 +0000</pubDate></item><item><title>Testnew</title><link>https://Donyounge.github.io/Donyounge.gitgub.io/post/Testnew.html</link><description>huohuohuo。</description><guid isPermaLink="true">https://Donyounge.github.io/Donyounge.gitgub.io/post/Testnew.html</guid><pubDate>Sat, 22 Feb 2025 04:25:47 +0000</pubDate></item></channel></rss>